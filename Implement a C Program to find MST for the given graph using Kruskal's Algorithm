#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100
#define MAX_EDGES 100

// Structure to represent an edge in the graph
struct Edge {
    int src, dest, weight;
};

// Structure to represent a subset for union-find
struct Subset {
    int parent;
    int rank;
};

// Function to compare two edges based on their weights
int compareEdges(const void* a, const void* b) {
    return ((struct Edge*)a)->weight - ((struct Edge*)b)->weight;
}

// Function to find the set of a vertex using the union-find algorithm
int find(struct Subset subsets[], int i) {
    if (subsets[i].parent != i) {
        subsets[i].parent = find(subsets, subsets[i].parent);
    }
    return subsets[i].parent;
}

// Function to perform union of two sets based on rank
void unionSets(struct Subset subsets[], int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);

    if (subsets[xroot].rank < subsets[yroot].rank) {
        subsets[xroot].parent = yroot;
    } else if (subsets[xroot].rank > subsets[yroot].rank) {
        subsets[yroot].parent = xroot;
    } else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

// Function to find and print the MST using Kruskal's algorithm
void kruskalMST(struct Edge edges[], int numVertices, int numEdges) {
    struct Edge result[MAX_EDGES]; // To store the result MST
    int e = 0; // Index variable for the result array
    int i = 0; // Index variable for the sorted edges array

    // Step 1: Sort all the edges in non-decreasing order of their weights
    qsort(edges, numEdges, sizeof(edges[0]), compareEdges);

    // Allocate memory for subsets
    struct Subset subsets[MAX_VERTICES];

    // Initialize subsets for each vertex
    for (int v = 0; v < numVertices; v++) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }

    // Step 2: Iterate through all edges in the sorted order
    while (e < numVertices - 1 && i < numEdges) {
        struct Edge nextEdge = edges[i++];

        int x = find(subsets, nextEdge.src);
        int y = find(subsets, nextEdge.dest);

        // If including this edge doesn't form a cycle, add it to the result MST
        if (x != y) {
            result[e++] = nextEdge;
            unionSets(subsets, x, y);
        }
    }

    // Print the result MST
    printf("Edge \tWeight\n");
    for (int j = 0; j < e; j++) {
        printf("%d - %d \t%d\n", result[j].src, result[j].dest, result[j].weight);
    }
}

// Main function
int main() {
		printf("Name : V balaram Krishna\n");
	printf("Reg No : 192324049\n");  
    int numVertices, numEdges;

    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &numVertices);

    struct Edge edges[MAX_EDGES];

    printf("Enter the number of edges in the graph: ");
    scanf("%d", &numEdges);

    printf("Enter the edges (src dest weight):\n");
    for (int i = 0; i < numEdges; i++) {
        scanf("%d %d %d", &edges[i].src, &edges[i].dest, &edges[i].weight);
    }

    // Call the function to find and print the MST
    kruskalMST(edges, numVertices, numEdges);

    return 0;
}
