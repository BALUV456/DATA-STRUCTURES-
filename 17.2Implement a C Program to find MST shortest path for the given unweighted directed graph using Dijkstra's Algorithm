#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_VERTICES 100

// Structure to represent an edge in the graph
struct Edge {
    int src, dest;
};

// Function to find the vertex with the minimum distance value, which is not yet included in the shortest path tree
int minDistance(int dist[], int sptSet[], int numVertices) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < numVertices; v++) {
        if (sptSet[v] == 0 && dist[v] < min) {
            min = dist[v];
            min_index = v;
        }
    }

    return min_index;
}

// Function to print the shortest path from source to target using parent array
void printPath(int parent[], int j) {
    if (parent[j] == -1)
        return;

    printPath(parent, parent[j]);
    printf("-> %d ", j);
}

// Function to print the shortest path distances and paths from source to all vertices
void printSolution(int dist[], int parent[], int src, int numVertices) {
    printf("Vertex\tDistance\tPath\n");
    for (int i = 0; i < numVertices; i++) {
        printf("%d\t%d\t\t%d ", i, dist[i], src);
        printPath(parent, i);
        printf("\n");
    }
}

// Function to perform Dijkstra's algorithm to find the shortest paths from a source vertex in an unweighted graph
void dijkstra(struct Edge edges[], int numVertices, int numEdges, int src) {
    int dist[MAX_VERTICES];    // The output array dist[i] holds the shortest distance from src to i
    int sptSet[MAX_VERTICES];  // sptSet[i] will be true if vertex i is included in the shortest path tree or the shortest distance from src to i is finalized
    int parent[MAX_VERTICES];   // Parent array to store the shortest path tree

    // Initialize all distances as INFINITE and sptSet[] as false
    for (int i = 0; i < numVertices; i++) {
        dist[i] = INT_MAX;
        sptSet[i] = 0;
        parent[i] = -1;
    }

    // Distance from source vertex to itself is always 0
    dist[src] = 0;

    // Find shortest path for all vertices
    for (int count = 0; count < numVertices - 1; count++) {
        // Pick the minimum distance vertex from the set of vertices not yet processed.
        int u = minDistance(dist, sptSet, numVertices);

        // Mark the picked vertex as processed
        sptSet[u] = 1;

        // Update dist value of the adjacent vertices of the picked vertex
        for (int i = 0; i < numEdges; i++) {
            if (edges[i].src == u && !sptSet[edges[i].dest] && dist[u] != INT_MAX && dist[u] + 1 < dist[edges[i].dest]) {
                dist[edges[i].dest] = dist[u] + 1;
                parent[edges[i].dest] = u;
            }
        }
    }

    // Print the constructed distance array and shortest paths
    printSolution(dist, parent, src, numVertices);
}

// Main function
int main() {
		printf("Name : V balaram Krishna\n");
	printf("Reg No : 192324049\n");  
    int numVertices, numEdges;

    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &numVertices);

    printf("Enter the number of edges in the graph: ");
    scanf("%d", &numEdges);

    struct Edge edges[MAX_VERTICES];

    printf("Enter the edges (src dest):\n");
    for (int i = 0; i < numEdges; i++) {
        scanf("%d %d", &edges[i].src, &edges[i].dest);
    }

    int src;
    printf("Enter the source vertex: ");
    scanf("%d", &src);

    // Call the function to find and print the shortest paths
    dijkstra(edges, numVertices, numEdges, src);

    return 0;
}

C:\Users\jahna\OneDrive\Pictures\Screenshots\Screenshot 2024-01-21 150323.png
